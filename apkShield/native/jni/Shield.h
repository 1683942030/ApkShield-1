//
// Created by nnn7h on 16-12-20.
//

#define ELF_MAGIC 0x464C457F

#ifndef KEYBOARDDEMO_SHIELD_H
#define KEYBOARDDEMO_SHIELD_H
char objectEncrypted[] = { 0x16, 0x0a, 0x0f, 0x08, 0x06, 0x09, 0x15, 0x4f, 0x05, 0x04, 0x19, 0x61 };
char path1Encrypted[] = { 0x4e, 0x05, 0x00, 0x15, 0x00, 0x4e, 0x05, 0x00, 0x15, 0x00, 0x4e, 0x61 };
char path2Encrypted[] = { 0x4e, 0x05, 0x00, 0x15, 0x00, 0x4e, 0x14, 0x12, 0x04, 0x13, 0x4e, 0x51, 0x4e, 0x61 };
char path3Encrypted[] = { 0x4e, 0x00, 0x11, 0x11, 0x3e, 0x16, 0x0a, 0x0f, 0x08, 0x06, 0x09, 0x15, 0x3e, 0x05, 0x04, 0x19, 0x4e, 0x61 };
char dex2oatEncrypted[] = { 0x4e, 0x12, 0x18, 0x12, 0x15, 0x04, 0x0c, 0x4e, 0x03, 0x08, 0x0f, 0x4e, 0x05, 0x04, 0x19, 0x53, 0x0e, 0x00, 0x15, 0x61 };
char dalvik_system_DexFile_classEncrypted[] = { 0x05, 0x00, 0x0d, 0x17, 0x08, 0x0a, 0x4e, 0x12, 0x18, 0x12, 0x15, 0x04, 0x0c, 0x4e, 0x25, 0x04, 0x19, 0x27, 0x08, 0x0d, 0x04, 0x61 };
char dvm_dalvik_system_DexFile_classEncrypted[] = { 0x05, 0x17, 0x0c, 0x3e, 0x05, 0x00, 0x0d, 0x17, 0x08, 0x0a, 0x3e, 0x12, 0x18, 0x12, 0x15, 0x04, 0x0c, 0x3e, 0x25, 0x04, 0x19, 0x27, 0x08, 0x0d, 0x04, 0x61 };
char dvmCreateCstrEncrypted[] = { 0x3e, 0x3b, 0x53, 0x52, 0x05, 0x17, 0x0c, 0x22, 0x13, 0x04, 0x00, 0x15, 0x04, 0x22, 0x12, 0x15, 0x13, 0x27, 0x13, 0x0e, 0x0c, 0x32, 0x15, 0x13, 0x08, 0x0f, 0x06, 0x31, 0x2a, 0x50, 0x53, 0x32, 0x15, 0x13, 0x08, 0x0f, 0x06, 0x2e, 0x03, 0x0b, 0x04, 0x02, 0x15, 0x61 };
char openDexFileMethod1Encrypted[] = { 0x0e, 0x11, 0x04, 0x0f, 0x25, 0x04, 0x19, 0x27, 0x08, 0x0d, 0x04, 0x61 };
char openDexFileMethod2Encrypted[] = { 0x0e, 0x11, 0x04, 0x0f, 0x25, 0x04, 0x19, 0x27, 0x08, 0x0d, 0x04, 0x2f, 0x00, 0x15, 0x08, 0x17, 0x04, 0x61 };
char dvmDecodeRefThreadEncrypted[] = { 0x3e, 0x3b, 0x53, 0x51, 0x05, 0x17, 0x0c, 0x25, 0x04, 0x02, 0x0e, 0x05, 0x04, 0x28, 0x0f, 0x05, 0x08, 0x13, 0x04, 0x02, 0x15, 0x33, 0x04, 0x07, 0x31, 0x57, 0x35, 0x09, 0x13, 0x04, 0x00, 0x05, 0x31, 0x59, 0x3e, 0x0b, 0x0e, 0x03, 0x0b, 0x04, 0x02, 0x15, 0x61 };
char execv_methodEncrypted[] = { 0x04, 0x19, 0x04, 0x02, 0x17, 0x61 };
char fstat_methodEncrypted[] = { 0x07, 0x12, 0x15, 0x00, 0x15, 0x61 };
char read_methodEncrypted[] = { 0x13, 0x04, 0x00, 0x05, 0x61 };
char read_chk_methodEncrypted[] = { 0x3e, 0x3e, 0x13, 0x04, 0x00, 0x05, 0x3e, 0x02, 0x09, 0x0a, 0x61 };
char mmap_methodEncrypted[] = { 0x0c, 0x0c, 0x00, 0x11, 0x61 };
char libart_soEncrypted[] = { 0x0d, 0x08, 0x03, 0x00, 0x13, 0x15, 0x4f, 0x12, 0x0e, 0x61 };
char libdvm_soEncrypted[] = { 0x0d, 0x08, 0x03, 0x05, 0x17, 0x0c, 0x4f, 0x12, 0x0e, 0x61 };
char applicationNameEncrypted[] = { 0x02, 0x0e, 0x0c, 0x4e, 0x16, 0x0a, 0x0f, 0x08, 0x06, 0x09, 0x15, 0x4e, 0x05, 0x04, 0x19, 0x12, 0x09, 0x04, 0x0d, 0x0d, 0x4e, 0x31, 0x13, 0x0e, 0x19, 0x18, 0x20, 0x11, 0x11, 0x0d, 0x08, 0x02, 0x00, 0x15, 0x08, 0x0e, 0x0f, 0x61 };

typedef struct MyDexInfo{
    char *fileName;
    void *addr;
    void *uncompressed_addr;
    int compressed_size;
    int uncompressed_size;
    struct MyDexInfo *next;
}dexInfo;

typedef struct methodEntry{
    void* point1;
    uint16_t data1;
    uint16_t data2;
    uint16_t data3;
    uint16_t data4;
    uint16_t data5;
    uint16_t data6;
    void *point2;
    void *point3;
    void *nativeFunc;
    void *point4;
    uint16_t data7;
    uint16_t data8;
    void *point5;
    uint32_t data9;
}VMethodEntryStruct;

typedef struct HashTable
{
    int i1;
    int i2;
    int i3;
    void* p1;
    void* p2;
    pthread_mutex_t lock;
} HashTable;
/*
 * Internal struct for managing DexFile.
 */
//struct DexOrJar {
//    char*       fileName;
//    bool        isDex;
//    bool        okayToFree;
//    RawDexFile* pRawDexFile;
//    JarFile*    pJarFile;
//    u1*         pDexMemory; // malloc()ed memory, if any
//};

#ifdef __cplusplus
extern "C" {
#endif
void printChar(const char *msg, char * src, int len);
#ifdef __cplusplus
}
#endif

#endif //KEYBOARDDEMO_SHIELD_H
